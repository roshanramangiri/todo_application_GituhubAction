name: to-do application CICD

on:
  workflow_dispatch:
    inputs:
      ec2-name:
        description: EC2 name
        required: true
        default: 'rrg-server'
        type: string
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Repo Checkout
        uses: actions/checkout@v2

      - name: Node.js Setup
        uses: actions/setup-node@v2.5.2
        with:
          node-version: 14
      - name: Install Angular CLI
        run: npm install -g @angular/cli

      - name: Install dependencies
        run: npm install

      - name: Build
        run: ng build

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: my-artifacts
          path: dist/todo/

  deploy-part-1:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: my-artifacts
          path: dist/todo/

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_USER_KEY }}'
          aws-secret-access-key: '${{ secrets.AWS_USER_SECRET_KEY }}'
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Terraform Apply
        id:   apply
        env:
          TF_VAR_ec2_name:  "${{ github.event.inputs.ec2-name }}"
        run: |
          tree .
          cd tf/
          terraform init
          terraform validate
          terraform apply -auto-approve
          aws s3 cp terraform.tfstate s3://roshanramangiri/
          echo "::set-output name=ec2_ip::$(terraform output -json ec2_ip)"
          ip_address=${{ steps.capture_ip.outputs.ec2_ip }}
          echo "EC2 instance IP address: $ip_address"
          pwd
          
      - name: Retrieve EC2 instance IP address
        run: |
          aws s3 cp s3://roshanramangiri/terraform.tfstate .
          ip_address=$(jq -r '.outputs.ec2_ip.value' terraform.tfstate)
          echo "EC2 instance IP address: $ip_address"
          scp -i '${{ secrets.ROSHAN_AUTH_KEY }}' -r dist/todo ubuntu@'{{ip_address}}':/var/www/html/

      - name: Install dependencies
        run: npm install

      # Add your deployment steps here
      # Uncomment and modify the following step to deploy to a remote server
      # - name: Deploy to production
      #   run: |
      #     # Example: Copy artifacts to a remote server
      #     scp -r dist/todo/* user@deploy-server:/path/to/destination
